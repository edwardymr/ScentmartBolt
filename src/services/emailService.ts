import emailjs from 'emailjs-com';
import { OrderDetails } from '../types';

const WHATSAPP_BUSINESS_NUMBER = '573213200601';

// EmailJS Configuration
const EMAILJS_SERVICE_ID = 'service_izdlxnw';
const EMAILJS_CUSTOMER_TEMPLATE_ID = 'template_di24rwu';
const EMAILJS_BUSINESS_TEMPLATE_ID = 'template_business_notification'; // Necesitar√°s crear este template
const EMAILJS_PUBLIC_KEY = 'cbMBtEKYL9MrUE46r';

export const emailService = {
  async sendOrderConfirmationEmail(orderDetails: OrderDetails): Promise<void> {
    try {
      const formatPrice = (price: number) => {
        return new Intl.NumberFormat('es-CO', {
          style: 'currency',
          currency: 'COP',
          minimumFractionDigits: 0
        }).format(price);
      };

      const itemsList = orderDetails.items.map(item => 
        `‚Ä¢ ${item.perfume.name} (${item.perfume.brand}) - Cantidad: ${item.quantity} - ${formatPrice(item.perfume.price * item.quantity)}`
      ).join('\n');

      // Email para el cliente
      const customerEmailParams = {
        to_email: orderDetails.customerInfo.email,
        to_name: orderDetails.customerInfo.name,
        customer_name: orderDetails.customerInfo.name,
        order_number: orderDetails.id,
        order_date: new Date(orderDetails.orderDate).toLocaleDateString('es-CO', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }),
        order_items: orderDetails.items.map(item => 
          `‚Ä¢ ${item.perfume.name} (${item.perfume.brand}) - Cantidad: ${item.quantity} - ${formatPrice(item.perfume.price * item.quantity)}`
        ).join('\n'),
        subtotal: formatPrice(orderDetails.total),
        shipping_cost: 'GRATIS',
        total_amount: formatPrice(orderDetails.total),
        shipping_address: orderDetails.customerInfo.address,
        shipping_city: orderDetails.customerInfo.city,
        customer_whatsapp: orderDetails.customerInfo.whatsapp,
        customer_email: orderDetails.customerInfo.email,
        payment_method: orderDetails.paymentMethod
      };

      console.log('üìß Enviando email de confirmaci√≥n al cliente:', customerEmailParams);
      
      // Enviar email de confirmaci√≥n
      await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_CUSTOMER_TEMPLATE_ID, customerEmailParams, EMAILJS_PUBLIC_KEY);
      console.log('‚úÖ Email de confirmaci√≥n enviado exitosamente');
      
      // Email para el negocio (usando el mismo template por ahora)
      const businessEmailParams = {
        to_email: 'scentmartperfumes@gmail.com',
        to_name: 'ScentMart Perfumes',
        customer_name: orderDetails.customerInfo.name,
        order_number: orderDetails.id,
        order_date: new Date(orderDetails.orderDate).toLocaleDateString('es-CO', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }),
        order_items: itemsList,
        subtotal: formatPrice(orderDetails.total),
        shipping_cost: 'GRATIS',
        total_amount: formatPrice(orderDetails.total),
        shipping_address: orderDetails.customerInfo.address,
        shipping_city: orderDetails.customerInfo.city,
        customer_whatsapp: orderDetails.customerInfo.whatsapp,
        customer_email: orderDetails.customerInfo.email,
        payment_method: orderDetails.paymentMethod
      };

      console.log('üìß Enviando notificaci√≥n al negocio:', businessEmailParams);
      
      // Enviar notificaci√≥n al negocio
      await emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_CUSTOMER_TEMPLATE_ID, businessEmailParams, EMAILJS_PUBLIC_KEY);
      console.log('‚úÖ Notificaci√≥n enviada exitosamente al negocio');
      
    } catch (error) {
      console.error('‚ùå Error enviando email de confirmaci√≥n:', error);
      throw error;
    }
  },

  async sendWhatsAppNotification(orderDetails: OrderDetails): Promise<void> {
    try {
      const formatPrice = (price: number) => {
        return new Intl.NumberFormat('es-CO', {
          style: 'currency',
          currency: 'COP',
          minimumFractionDigits: 0
        }).format(price);
      };

      // Create detailed WhatsApp message
      const itemsList = orderDetails.items.map(item => 
        `‚Ä¢ ${item.perfume.name} (${item.perfume.brand})\n  Cantidad: ${item.quantity} - ${formatPrice(item.perfume.price * item.quantity)}`
      ).join('\n\n');

      const whatsappMessage = `üå∏ *NUEVO PEDIDO - SCENTMART* üå∏

üìã *Detalles del Pedido:*
‚Ä¢ N√∫mero: ${orderDetails.id}
‚Ä¢ Fecha: ${new Date(orderDetails.orderDate).toLocaleDateString('es-CO', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
})}

üë§ *Informaci√≥n del Cliente:*
‚Ä¢ Nombre: ${orderDetails.customerInfo.name}
‚Ä¢ Email: ${orderDetails.customerInfo.email}
‚Ä¢ WhatsApp: ${orderDetails.customerInfo.whatsapp}

üìç *Direcci√≥n de Entrega:*
‚Ä¢ ${orderDetails.customerInfo.address}
‚Ä¢ ${orderDetails.customerInfo.city}

üõçÔ∏è *Productos Ordenados:*
${itemsList}

üí∞ *Resumen de Pago:*
‚Ä¢ Subtotal: ${formatPrice(orderDetails.total - orderDetails.shippingCost)}
${orderDetails.shippingCost > 0 ? `‚Ä¢ Env√≠o: ${formatPrice(orderDetails.shippingCost)}` : '‚Ä¢ Env√≠o: GRATIS (Santa Marta)'}
‚Ä¢ M√©todo: ${orderDetails.paymentMethod}
‚Ä¢ Total: *${formatPrice(orderDetails.total)}*

${orderDetails.paymentMethod === 'Transferencia Bancaria' ? `
üè¶ *PROCESO DE PAGO NACIONAL:*
1. Datos bancarios ser√°n enviados por WhatsApp
2. Cliente debe enviar comprobante de transferencia
3. Procesar env√≠o una vez confirmado el pago

‚ö†Ô∏è *IMPORTANTE:* Env√≠o nacional - Requiere transferencia bancaria
` : ''}
‚úÖ Estado: ${orderDetails.status}

---
*ScentMart Perfumes*
Tu Aroma, Tu Historia üå∏`;

      // Send WhatsApp message to business number
      const encodedMessage = encodeURIComponent(whatsappMessage);
      const whatsappUrl = `https://wa.me/${WHATSAPP_BUSINESS_NUMBER}?text=${encodedMessage}`;
      
      console.log('üì± Enviando notificaci√≥n WhatsApp:', {
        to: WHATSAPP_BUSINESS_NUMBER,
        orderId: orderDetails.id,
        customer: orderDetails.customerInfo.name,
        total: formatPrice(orderDetails.total)
      });

      // Open WhatsApp with the message
      window.open(whatsappUrl, '_blank', 'noopener,noreferrer');
      
      console.log('‚úÖ Notificaci√≥n WhatsApp enviada exitosamente');
    } catch (error) {
      console.error('‚ùå Error enviando WhatsApp:', error);
    }
  },

  // Alternative method: Send customer WhatsApp confirmation
  async sendCustomerWhatsAppConfirmation(orderDetails: OrderDetails): Promise<void> {
    try {
      const formatPrice = (price: number) => {
        return new Intl.NumberFormat('es-CO', {
          style: 'currency',
          currency: 'COP',
          minimumFractionDigits: 0
        }).format(price);
      };

      const customerMessage = `üå∏ *CONFIRMACI√ìN DE PEDIDO - SCENTMART* üå∏

¬°Hola ${orderDetails.customerInfo.name}! üëã

Tu pedido ha sido confirmado exitosamente:

üìã *N√∫mero de Pedido:* ${orderDetails.id}
üìÖ *Fecha:* ${new Date(orderDetails.orderDate).toLocaleDateString('es-CO')}
üí∞ *Total:* ${formatPrice(orderDetails.total)}

üöö *Entrega:*
Recibir√°s tu pedido en 1-2 d√≠as h√°biles en:
${orderDetails.customerInfo.address}, ${orderDetails.customerInfo.city}

üí≥ *Pago:* ${orderDetails.paymentMethod}

¬°Gracias por elegir ScentMart! 
Tu Aroma, Tu Historia üå∏

---
*ScentMart Perfumes*
üìû +57 321 320 0601
üìß scentmartperfumes@gmail.com`;

      // Remove country code for customer WhatsApp
      const customerPhone = orderDetails.customerInfo.whatsapp.replace(/^\+?57/, '57');
      const encodedCustomerMessage = encodeURIComponent(customerMessage);
      const customerWhatsappUrl = `https://wa.me/${customerPhone}?text=${encodedCustomerMessage}`;
      
      console.log('üì± Preparando confirmaci√≥n WhatsApp para cliente:', {
        to: customerPhone,
        orderId: orderDetails.id
      });

      // For demo purposes, we'll log the URL
      console.log('üîó URL de confirmaci√≥n al cliente:', customerWhatsappUrl);
      
    } catch (error) {
      console.error('‚ùå Error preparando WhatsApp del cliente:', error);
    }
  }
};